﻿@page "/products/edit/{productId}"

@using Backend.Domain.Entities.Products;
@using Frontend.Web.Models.Client
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Products;
@inject NavigationManager NavigationManager
@inject ProductService _productService
@inject AuthenticationService _authenticationService;
@inject Sotsera.Blazor.Toaster.IToaster Toaster

<PageTitle>Aurora - Edit Product</PageTitle>
<aside class="right-sidebar @formCssClass">
@if (isVariantSidebar)
{
    <Frontend.Web.Components.ProductVariants.Forms.Add.AddProductVariant CollapseRightSidebar=collapseProductVariantForm
        ToggleRightSidebar="ToggleProductVariantForm"
        ParentProductDetail="@Model.Result" 
    />
}
</aside>
<div class="container-fluid">
    @if (Model.Result is null && isLoading)
    {
        <Frontend.Web.Components.Loader.LoadingSpinner></Frontend.Web.Components.Loader.LoadingSpinner>
    }
    else
    {
        @if (Model.StatusCode == 200)
        {
            <a class="btn" href="/report/@Model.Result!.TenantId.ToString()/product-summary/@productId">Generate report</a>
            <Frontend.Web.Components.Products.Forms.Edit.EditProduct Model="@Model.Result" />

            <button class="btn btn-outline-primary" @onclick="ToggleProductVariantForm">
                @btnText
            </button>
            <Frontend.Web.Components.ProductVariants.Table.ProductVariantsTable parentProductId="@productId" />
        }
        else
        {
            <h6>Selected item does not exist...</h6>
        }
    }

</div>

@code
{
    private string? btnText = "New";
    public string? formCssClass = null;
    public bool isVariantSidebar = false;

    private bool collapseProductVariantForm = true;
    private void ToggleProductVariantForm()
    {
        isVariantSidebar = true;
        collapseProductVariantForm = !collapseProductVariantForm;
        formCssClass = collapseProductVariantForm ? null : "show-menu";
    }
}

@code
{
    public ProductDetail? selectedParentProduct = null;
    private void HandleCreateNewVariant(ProductDetail selectedProduct)
    {
        selectedParentProduct = selectedProduct;
        ToggleProductVariantForm();
    }
}

@code
{
    private bool isLoading = true;
    private ApiResponse<ProductDetail> Model = new ApiResponse<ProductDetail>();
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var context = await _authenticationService.GetContext();
        Model = await _productService.GetProductWithDetails(context!.Tenant.Id.ToString(), productId.ToString());
        if(Model.StatusCode != 200)
        {
            Toaster.Error(Model.ErrorMessage);
        }
        isLoading = false;
    }
}


@code
{
    [Parameter]
    public string productId { get; set; }
}