@using Backend.Domain.Entities.Products;
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Products;
@inject ProductVariantService _productVariantService;
@inject AuthenticationService _auth;
@inject NavigationManager NavigationManager;
@inject Sotsera.Blazor.Toaster.IToaster Toaster;

<div class="card card-body">
    <h5 class="card-title fw-semibold mb-4">Variants</h5>
    @if (isLoading)
    {
        <Frontend.Web.Components.Loader.LoadingSpinner />
    }
    else
    {
        @if (!(variants == null || variants.Count() == 0))
        {
            <div class="table-responsive">
                <table class="table search-table align-middle text-nowrap">
                    <thead class="header-item">
                        <tr>
                            <th>
                                <div class="n-chk align-self-center text-center">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input primary" id="contact-check-all">
                                        <label class="form-check-label" for="contact-check-all"></label>
                                        <span class="new-control-indicator"></span>
                                    </div>
                                </div>
                            </th>
                            <th>Image</th>
                            <th>SKU</th>
                            <th>Name</th>
                            <th>Color</th>
                            <th>Liquid Weight</th>
                            <th>Total Weight</th>
                            <th>Value</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var variant in variants)
                        {
                            <!-- start row -->
                            <tr class="search-items">
                                <td>
                                    <div class="n-chk align-self-center text-center">
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input contact-chkbox primary" id="checkbox1">
                                            <label class="form-check-label" for="checkbox1"></label>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <img src="https://img.freepik.com/fotos-gratis/feche-o-gato-fofo-dentro-de-casa_23-2148882585.jpg" alt="avatar" class="rounded-circle" width="35">
                                    </div>
                                </td>
                                <td>
                                    <span class="usr-email-addr" data-email="adams@mail.com">@variant.SKU</span>
                                </td>
                                <td>
                                    <span class="usr-email-addr" data-email="adams@mail.com">@variant.Name</span>
                                </td>
                                <td>
                                    <span class="usr-location" data-location="Boston, USA">@variant.ColorName</span>
                                </td>
                                <td>
                                    <span class="usr-ph-no">@variant.LiquidWeight</span>
                                </td>
                                <td>
                                    <span class="usr-ph-no">@variant.TotalWeight</span>
                                </td>
                                <td>
                                    <span class="usr-ph-no">@variant.Value</span>
                                </td>
                                <td>
                                    <div class="action-btn">
                                        <a class="text-primary edit" @onclick="() => Edit(variant)">
                                            <i class="ti ti-eye fs-5"></i>
                                        </a>
                                        <a class="text-dark delete ms-2" @onclick="() => DeleteModalAction(variant)">
                                            <i class="ti ti-trash fs-5"></i>
                                        </a>
                                        
                                    </div>

                                </td>

                            </tr>
                            <!-- end row -->
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p>No variants created yet.</p>
        }
    }
</div>


@if (selectedvariant is not null)
{
    <Frontend.Web.Components.ProductVariants.Modals.DeleteVariant ShowModal="ShowModal" selectedvariant="selectedvariant" />
}

@code
{
    ProductVariant? selectedvariant = null;
    public void DeleteModalAction(ProductVariant variant)
    {
        ShowModal = true;
        selectedvariant = variant;
    }

}

@code {
    public bool isLoading;
    public IEnumerable<ProductVariant> variants = null;
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var context = await _auth.GetContext();
        var response = await _productVariantService.GetVariantsByProduct(context.Tenant.Id.ToString(), parentProductId);
        if (response.Successful())
        {
            variants = response.Result;
        }
        else
        {
            Toaster.Error(response.ErrorMessage);
        }
        isLoading = false;
    }
}

@code
{
    [Parameter]
    public EventCallback<ProductVariant> SelectedItemVariant { get; set; }

    private void Edit(ProductVariant variant)
    {
        SelectedItemVariant.InvokeAsync(variant);
    }
}

@code 
{
    [Parameter]
    public string parentProductId { get; set; }

    [Parameter]
    public bool ShowModal { get; set; }
}


